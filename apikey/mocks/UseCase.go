// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	model "github.com/Cuprumbur/weather-service/model"
	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// CreateApiKey provides a mock function with given fields: detectorID, scopes
func (_m *UseCase) CreateApiKey(detectorID int, scopes []string) (string, error) {
	ret := _m.Called(detectorID, scopes)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, []string) string); ok {
		r0 = rf(detectorID, scopes)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, []string) error); ok {
		r1 = rf(detectorID, scopes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *UseCase) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllApiKeys provides a mock function with given fields:
func (_m *UseCase) FindAllApiKeys() ([]*model.ApiKey, error) {
	ret := _m.Called()

	var r0 []*model.ApiKey
	if rf, ok := ret.Get(0).(func() []*model.ApiKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ApiKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindApiKeys provides a mock function with given fields: detectorID
func (_m *UseCase) FindApiKeys(detectorID int) ([]*model.ApiKey, error) {
	ret := _m.Called(detectorID)

	var r0 []*model.ApiKey
	if rf, ok := ret.Get(0).(func(int) []*model.ApiKey); ok {
		r0 = rf(detectorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ApiKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(detectorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateScopes provides a mock function with given fields: id, scopes
func (_m *UseCase) UpdateScopes(id int, scopes []string) error {
	ret := _m.Called(id, scopes)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []string) error); ok {
		r0 = rf(id, scopes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
